# addressxyz :: azure-devops

name: $(date:yyyyMMdd)$(rev:.rr)

pr:
  - master

stages:
  - stage: 'build'
    displayName: 'build'
    jobs:
      - job:
        displayName: 'build::aspnet'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: UseDotNet@2
            displayName: 'dotnet sdk'
            inputs:
              version: '2.2.401'
          - script: |
              dotnet tool install --global dotnet-sonarscanner
            displayName: 'dotnet install'
          - script: |
              set -e
              cd aspnet
              dotnet sonarscanner begin /k:"addressxyz" /n:"ADDRESS(xyz)" /o:"revaturexyz" /v:"0.0.0" /d:sonar.cs.opencover.reportsPaths=**/coverage.opencover.xml /d:sonar.cs.vstest.reportsPaths=**/*.trx /d:sonar.host.url=https://sonarcloud.io/ /d:sonar.login=$SONAR_LOGIN /d:sonar.branch.name=$BRANCH
              dotnet build
              dotnet test --logger trx /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=\"cobertura,opencover\" /p:Exclude=[xunit*]*
              dotnet sonarscanner end /d:sonar.login=$SONAR_LOGIN
            condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
            displayName: 'dotnet build::branch'
            env:
              BRANCH: $(Build.SourceBranchName)
              SONAR_LOGIN: $(sonarcloud.login)
          - script: |
              set -e
              cd aspnet
              dotnet sonarscanner begin /k:"addressxyz" /n:"ADDRESS(xyz)" /o:"revaturexyz" /v:"0.0.0" /d:sonar.cs.opencover.reportsPaths=**/coverage.opencover.xml /d:sonar.cs.vstest.reportsPaths=**/*.trx /d:sonar.host.url=https://sonarcloud.io/ /d:sonar.login=$SONAR_LOGIN /d:sonar.pullrequest.base=master /d:sonar.pullrequest.branch=$PULL_REQUEST_BRANCH /d:sonar.pullrequest.key=$PULL_REQUEST_KEY /d:sonar.pullrequest.provider=GitHub /d:sonar.pullrequest.github.repository=revaturexyz/addressxyz
              dotnet build
              dotnet test --logger trx /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=\"cobertura,opencover\" /p:Exclude=[xunit*]*
              dotnet sonarscanner end /d:sonar.login=$SONAR_LOGIN
            condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
            displayName: 'dotnet build::pull-request'
            env:
              PULL_REQUEST_BRANCH: $(Build.SourceBranchName)
              PULL_REQUEST_KEY: $(System.PullRequest.PullRequestNumber)
              SONAR_LOGIN: $(sonarcloud.login)
          - task: PublishTestResults@2
            displayName: 'publish result::unit-test'
            inputs:
              testRunner: VSTest
              testResultsFiles: '**/*.trx'
          - task: PublishCodeCoverageResults@1
            displayName: 'publish result::code-coverage'
            inputs:
              codeCoverageTool: cobertura
              summaryFileLocation: '**/coverage.cobertura.xml'

  - stage: 'pack'
    condition: succeeded('build')
    dependsOn:
      - build
    displayName: 'pack'
    jobs:
      - job:
        displayName: 'pack::aspnet'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: Docker@2
            inputs:
              command: 'login'
              containerRegistry: 'revaturexyz-docker'
            displayName: 'docker login'
          - script: |
              docker image build -f .docker/dockerfile -t addressxyz .
            displayName: 'docker build'
          - script: |
              set -e
              docker image tag addressxyz revaturexyz/addressxyz:pre
              docker image push revaturexyz/addressxyz:pre
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/master'))
            displayName: 'docker push::pre'
          - task: Docker@2
            inputs:
              command: 'logout'
              containerRegistry: 'revaturexyz-docker'
            displayName: 'docker logout'

  - stage: 'pre'
    condition: succeeded('pack')
    dependsOn:
      - pack
    displayName: 'deploy::pre'
    jobs:
      - job:
        displayName: 'deploy::pre::aspnet'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadSecureFile@1
            displayName: 'docker compose'
            inputs:
              secureFile: 'dockerup.addressxyz.pre.yaml'
            name: dkup
          - task: DownloadSecureFile@1
            displayName: 'terraform login'
            inputs:
              secureFile: 'terraform.key'
            name: tfkey
          - task: DownloadSecureFile@1
            displayName: 'terraform state'
            inputs:
              secureFile: 'backend.addressxyz.hcl'
            name: tfstate
          - task: DownloadSecureFile@1
            displayName: 'terraform variables'
            inputs:
              secureFile: 'terraform.addressxyz.pre.auto.tfvars'
            name: tfvars
          - script: |
              set -e
              cp $(dkup.secureFilePath) .docker/
              cp $(tfkey.secureFilePath) $HOME/.terraformrc
              cp $(tfvars.secureFilePath) .terraformio/
              cd .terraformio
              printf '2\n' | terraform init -backend-config=$(tfstate.secureFilePath)
              terraform plan
              terraform apply -auto-approve
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/master'))
            displayName: 'terraform apply::pre'
            env:
              ARM_CLIENT_ID: $(arm.client.id)
              ARM_CLIENT_SECRET: $(arm.client.secret)
              ARM_SUBSCRIPTION_ID: $(arm.subscription.id)
              ARM_TENANT_ID: $(arm.tenant.id)
              CLOUDFLARE_EMAIL: $(cloudflare.email)
              CLOUDFLARE_TOKEN: $(cloudflare.token)

trigger:
  branches:
    include:
      - master
  tags:
    include:
      - '*'

variables:
  - group: azure.vars
  - group: cloudflare.vars
  - group: sonarcloud.vars
